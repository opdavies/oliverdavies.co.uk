<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oliver Davies</title>
    <link>https://www.oliverdavies.uk</link>
    <language>en</language>
    <description>Oliver Davies, Drupal Developer</description>    <atom:link href="https://www.oliverdavies.uk/blog/tags/drupal-planet.xml" rel="self" type="application/rss+xml" />
    <lastBuildDate>Sat, 15 Jul 2017 08:29:45 +0100</lastBuildDate>
            <item>
        <title>Turning Your Custom Drupal Module into a Feature</title>
        <link>https://www.oliverdavies.uk/blog/2017/05/20/turning-drupal-module-into-feature</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2017/05/20/turning-drupal-module-into-feature</guid>
        <pubDate>Sat, 20 May 2017 00:00:00 +0100</pubDate>
        <description><p>Yesterday I was fixing a bug in an inherited Drupal 7 custom module, and I decided that I was going to add some tests to ensure that the bug was fixed and doesn’t get accidentially re-introduced in the future. The test though required me to have a particular content type and fields which are specific to this site, so weren’t present within the standard installation profile used to run tests.</p>

<p>I decided to convert the custom module into a <a href="https://www.drupal.org/project/features">Feature</a> so that the content type and it’s fields could be added to it, and therefore present on the testing site once the module is installed.</p>

<p>To do this, I needed to expose the module to the Features API.</p>
</description>
      </item>
          <item>
        <title>DrupalCamp Bristol 2017 - Early Bird Tickets, Call for Sessions, Sponsors</title>
        <link>https://www.oliverdavies.uk/blog/2017/05/15/drupalcamp-bristol-early-bird-tickets-sessions-sponsors</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2017/05/15/drupalcamp-bristol-early-bird-tickets-sessions-sponsors</guid>
        <pubDate>Mon, 15 May 2017 00:00:00 +0100</pubDate>
        <description><p><img src="/assets/images/blog/drupalcamp-bristol-17-logo.jpg" alt="DrupalCamp Bristol 2017 logo" class="is-centered"></p>

<p>In less than two months time, <a href="https://2017.drupalcampbristol.co.uk">DrupalCamp Bristol</a> will be back for our third year! (July seems to come around quicker each year). This is this year’s schedule and venues:</p>

<ul>
<li>30th June - CXO (Business) day - <a href="http://www.watershed.co.uk">Watershed</a></li>
<li>1st July - Developer conference - <a href="http://www.bris.ac.uk/chemistry">University of Bristol, School of Chemistry</a></li>
<li>2nd July - Contribution sprints - Venue TBC</li>
</ul>
</description>
      </item>
          <item>
        <title>Fixing Drupal SimpleTest issues inside Docker Containers</title>
        <link>https://www.oliverdavies.uk/blog/2017/05/05/fixing-drupal-simpletest-docker</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2017/05/05/fixing-drupal-simpletest-docker</guid>
        <pubDate>Fri, 05 May 2017 00:00:00 +0100</pubDate>
        <description><p>I’ve been a Drupal VM user for a long time, but lately I’ve been using a combination Drupal VM and Docker for my local development environment. There were a couple of issues preventing me from completely switching to Docker - one of which being that when I tried running of my Simpletest tests, a lot of them would fail where they would pass when run within Drupal VM.</p>

<p>Here’s an excerpt from my <code>docker-compose.yml</code> file:</p>
</description>
      </item>
          <item>
        <title>Simplifying Drupal Migrations with xautoload</title>
        <link>https://www.oliverdavies.uk/blog/2016/05/03/simplifying-drupal-migrations-with-xautoload</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2016/05/03/simplifying-drupal-migrations-with-xautoload</guid>
        <pubDate>Tue, 03 May 2016 00:00:00 +0100</pubDate>
        <description><p>How to use the <a href="https://www.drupal.org/project/xautoload">xautoload</a> module to autoload migration classes within your Drupal 7 migration modules.</p>
</description>
      </item>
          <item>
        <title>Announcing the Drupal VM Generator</title>
        <link>https://www.oliverdavies.uk/blog/2016/02/15/announcing-the-drupal-vm-generator</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2016/02/15/announcing-the-drupal-vm-generator</guid>
        <pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate>
        <description><p>For the past few weeks I’ve been working on a personal side project, based on Drupal VM. It’s called the <a href="https://github.com/opdavies/drupal-vm-generator">Drupal VM Generator</a>, and over the weekend I’ve added the final features and fixed the remaining issues, and tagged the 1.0.0 release.</p>
</description>
      </item>
          <item>
        <title>Programmatically Load an Entityform in Drupal 7</title>
        <link>https://www.oliverdavies.uk/blog/2015/12/22/programmatically-load-an-entityform-in-drupal-7</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2015/12/22/programmatically-load-an-entityform-in-drupal-7</guid>
        <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
        <description><p>I recently had my first experience using the <a href="https://www.drupal.org/project/entityform">Entityform module</a> in a project. It was quite easy to configure with different form types, but then I needed to embed the form into an overlay. I was expecting to use the <code>drupal_get_form()</code> function and render it, but this didn’t work.</p>

<p>Here are the steps that I took to be able to load, render and embed the form.</p>
</description>
      </item>
          <item>
        <title>How to Define a Minimum Drupal Core Version</title>
        <link>https://www.oliverdavies.uk/blog/2015/04/03/how-to-define-a-minimum-drupal-core-version</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2015/04/03/how-to-define-a-minimum-drupal-core-version</guid>
        <pubDate>Fri, 03 Apr 2015 00:00:00 +0100</pubDate>
        <description></description>
      </item>
          <item>
        <title>Include a Local Drupal Settings file for Environment Configuration and Overrides</title>
        <link>https://www.oliverdavies.uk/blog/2014/12/20/include-local-drupal-settings-file-environment-configuration-and-overrides</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2014/12/20/include-local-drupal-settings-file-environment-configuration-and-overrides</guid>
        <pubDate>Sat, 20 Dec 2014 00:00:00 +0000</pubDate>
        <description><p>How to create and include a local settings file to define and override environment-specific variables, and keep sensitive things like your database credentials and API keys safe.</p>
</description>
      </item>
          <item>
        <title>Include environment-specific settings files on Pantheon</title>
        <link>https://www.oliverdavies.uk/blog/2014/11/27/pantheon-settings-files</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2014/11/27/pantheon-settings-files</guid>
        <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
        <description><p>I was recently doing some work on a site hosted on <a href="http://getpantheon.com">Pantheon</a> and came across an issue, for which part of the suggested fix was to ensure that the <code>$base_url</code> variable was explicitly defined within settings.php (this is also best practice on all Drupal sites).</p>

<p>The way that was recommended was by using a <code>switch()</code> function based on Pantheon's environment variable. For example:</p>
</description>
      </item>
          <item>
        <title>Using Remote Files when Developing Locally with Stage File Proxy Module</title>
        <link>https://www.oliverdavies.uk/blog/2014/11/20/using-remote-files-when-developing-locally-with-stage-file-proxy-module</link>
        <guid isPermaLink="true">https://www.oliverdavies.uk/blog/2014/11/20/using-remote-files-when-developing-locally-with-stage-file-proxy-module</guid>
        <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
        <description><p>How to install and configure the <a href="https://www.drupal.org/project/stage_file_proxy">Stage File Proxy</a> module to serve remote images on your local Drupal site.</p>
</description>
      </item>
      </channel>
</rss>